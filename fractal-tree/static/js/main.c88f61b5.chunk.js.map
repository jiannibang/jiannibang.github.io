{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initAxis","THREE","root","App","useState","scene","camera","renderer","canvas","controls","obj","setObj","frameId","setFrameId","timestamp","setTimestamp","leftAlpha","rightAlpha","leftScale","rightScale","leftBeta","rightBeta","maxLevel","color","data","setData","mat","drawTree","i","children","length","remove","grid","translateY","add","clear","curves","fork","points","cnt","cross","push","last","dir","subVectors","normalDir","copy","normalize","dir_left","crossLeft","applyAxisAngle","Math","PI","dir_right","crossRight","newCross","crossVectors","multiplyScalar","map","setFromPoints","geometry","forEach","mesh","useEffect","window","innerWidth","innerHeight","alpha","setSize","setPixelRatio","devicePixelRatio","background","document","getElementsByClassName","appendChild","domElement","OrbitControls","autoRotate","position","z","setInterval","Date","getTime","update","render","requestAnimationFrame","className","href","onUpdate","path","label","min","max","step","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAWMA,G,OAAW,IAAIC,IAAc,EAAG,EAAG,IACnCC,EAAO,CAAC,IAAID,IAAc,GAAI,IAAK,GAAI,IAAIA,IAAc,GAAI,IAAK,IAqOzDE,EAnOH,WAAO,IAAD,EACMC,mBAAS,CAC7BC,MAAO,KACPC,OAAQ,KACRC,SAAU,KACVC,OAAQ,KACRC,SAAU,OANI,mBACTC,EADS,KACJC,EADI,KAQRN,EAAsCK,EAAtCL,MAAOC,EAA+BI,EAA/BJ,OAAQC,EAAuBG,EAAvBH,SAAUE,EAAaC,EAAbD,SARjB,EAScL,mBAAS,MATvB,mBASTQ,EATS,KASAC,EATA,OAUkBT,mBAAS,MAV3B,mBAUTU,EAVS,KAUEC,EAVF,OAWQX,mBAAS,CAC/BY,UAAW,GACXC,YAAa,GACbC,UAAW,GACXC,WAAY,GACZC,SAAU,GACVC,UAAW,GACXC,SAAU,GACVC,MAAO,UAnBO,mBAWTC,EAXS,KAWHC,EAXG,KAsBdT,EAQEQ,EARFR,UACAC,EAOEO,EAPFP,WACAC,EAMEM,EANFN,UACAC,EAKEK,EALFL,WACAC,EAIEI,EAJFJ,SACAC,EAGEG,EAHFH,UACAC,EAEEE,EAFFF,SACAC,EACEC,EADFD,MAEIG,EAAM,IAAIzB,IAAwB,CAAEsB,UAYpCI,EAAW,YAXH,WACZ,GAAItB,EAAO,CACT,IAAK,IAAIuB,EAAI,EAAGA,EAAIvB,EAAMwB,SAASC,OAAQF,IACzCvB,EAAM0B,OAAO1B,EAAMwB,SAASD,IAC5BA,IAEF,IAAMI,EAAO,IAAI/B,IAAiB,KAClC+B,EAAKC,YAAY,KACjB5B,EAAM6B,IAAIF,IAIZG,GACA,IAAMC,EAAS,IACF,SAAPC,EAAQC,EAAQC,EAAKC,GACzB,GAAW,GAAPD,EAAJ,CAGA,GAAIA,IAAQjB,EAAU,OAAOc,EAAOK,KAAKH,GAEzC,IAAMI,EAAOJ,EAAOA,EAAOR,OAAS,GAC9Ba,GAAM,IAAI1C,KAAgB2C,WAC9BF,EACAJ,EAAOA,EAAOR,OAAS,IAGnBe,GAAY,IAAI5C,KAAgB6C,KAAKH,GAAKI,YAC5CC,GAAW,IAAI/C,KAAgB6C,KAAKH,GAClCM,EAAYT,GACd,IAAIvC,KACD6C,KAAKN,GACLU,eAAeL,EAAYzB,EAAW,IAAO+B,KAAKC,IACrDpD,EACJgD,EAASE,eAAeD,EAAYjC,EAAY,IAAOmC,KAAKC,IAC5DJ,EAASD,YAET,IAAIM,GAAY,IAAIpD,KAAgB6C,KAAKH,GACnCW,EAAad,GACf,IAAIvC,KACD6C,KAAKN,GACLU,eAAeL,EAAYxB,EAAY,IAAO8B,KAAKC,IACtDpD,EACJqD,EAAUH,eAAeI,EAAarC,EAAa,IAAOkC,KAAKC,IAC/DC,EAAUN,YAEV,IAAMQ,GAAW,IAAItD,KAClBuD,aAAaR,EAAUK,GACvBN,YAEHV,EAAK,GAAD,mBAEGC,GAFH,EAGA,IAAIrC,KACD6C,KAAKJ,GACLR,IAAIc,EAASS,eAAed,EAAIb,SAAWZ,MAEhDqB,EAAM,EACNgB,GAEFlB,EAAK,GAAD,mBAEGC,GAFH,EAGA,IAAIrC,KACD6C,KAAKJ,GACLR,IAAImB,EAAUI,eAAed,EAAIb,SAAWX,MAEjDoB,EAAM,EACNgB,IAGJlB,CAAKnC,EAAM,GACXkC,EACGsB,KAAI,SAACpB,GAAD,OAAY,IAAIrC,KAAuB0D,cAAcrB,MACzDoB,KAAI,SAACE,GAAD,OAAc,IAAI3D,IAAW2D,EAAUlC,MAC3CmC,SAAQ,SAACC,GACRzD,EAAM6B,IAAI4B,OA2DhB,OAxDAC,qBAAU,WACJ1D,GACFsB,MAED,CACDtB,EACAW,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,IAEFwC,qBAAU,cAIP,CAACjD,IAEJiD,qBAAU,WACR,IAAKrD,EAAIL,MAAO,CACd,IAAMA,EAAQ,IAAIJ,IACZK,EAAS,IAAIL,IACjB,GACA+D,OAAOC,WAAaD,OAAOE,YAC3B,GACA,KAEI3D,EAAW,IAAIN,IAAoB,CAAEkE,OAAO,IAClD5D,EAAS6D,QAAQJ,OAAOC,WAAYD,OAAOE,aAC3C3D,EAAS8D,cAAcL,OAAOM,kBAE9BjE,EAAMkE,WAAa,IAAItE,IAAY,UACnCuE,SACGC,uBAAuB,OAAO,GAC9BC,YAAYnE,EAASoE,YACxB,IAAMnE,EAASD,EAASoE,WAClBlE,EAAW,IAAImE,IAActE,EAAQE,GAC3CC,EAASoE,YAAa,EACtBvE,EAAOwE,SAASC,EAAI,IAEpBpE,EAAO,CAAEN,QAAOC,SAAQC,WAAUC,SAAQC,aAC1CuE,aAAY,WACVjE,GAAa,IAAIkE,MAAOC,aACvB,QAEJ,CAACxE,IACJqD,qBAAU,WACJ1D,IACFI,EAAS0E,SACT5E,EAAS6E,OAAO/E,EAAOC,IAEzB+E,sBAAsBxE,KACrB,CAACD,IAEF,yBAAK0E,UAAU,OACb,yBAAKA,UAAU,OACb,kDACA,0CACc,IACZ,uBAAGC,KAAK,8CAAR,wBAKJ,kBAAC,IAAD,CAAQ/D,KAAMA,EAAMgE,SAAU/D,GAC5B,kBAAC,IAAD,CACEgE,KAAK,YACLC,MAAM,YACNC,KAAM,IACNC,IAAK,IACLC,KAAM,IAER,kBAAC,IAAD,CACEJ,KAAK,aACLC,MAAM,aACNC,KAAM,IACNC,IAAK,IACLC,KAAM,IAER,kBAAC,IAAD,CACEJ,KAAK,YACLC,MAAM,YACNC,KAAM,EACNC,IAAK,EACLC,KAAM,MAER,kBAAC,IAAD,CACEJ,KAAK,aACLC,MAAM,aACNC,KAAM,EACNC,IAAK,EACLC,KAAM,MAER,kBAAC,IAAD,CACEJ,KAAK,WACLC,MAAM,WACNC,KAAM,IACNC,IAAK,IACLC,KAAM,IAER,kBAAC,IAAD,CACEJ,KAAK,YACLC,MAAM,YACNC,KAAM,IACNC,IAAK,IACLC,KAAM,IAER,kBAAC,IAAD,CAAWJ,KAAK,WAAWC,MAAM,WAAWC,IAAK,EAAGC,IAAK,GAAIC,KAAM,IACnE,kBAAC,IAAD,CAAUJ,KAAK,QAAQC,MAAM,aC/NjBI,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c88f61b5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport DatGui, {\n  DatBoolean,\n  DatColor,\n  DatNumber,\n  DatString,\n} from \"react-dat-gui\";\nimport \"react-dat-gui/dist/dist/index.css\";\nconst initAxis = new THREE.Vector3(0, 0, 1);\nconst root = [new THREE.Vector3(0, -180, 0), new THREE.Vector3(0, -100, 0)];\n\nconst App = () => {\n  const [obj, setObj] = useState({\n    scene: null,\n    camera: null,\n    renderer: null,\n    canvas: null,\n    controls: null,\n  });\n  const { scene, camera, renderer, controls } = obj;\n  const [frameId, setFrameId] = useState(null);\n  const [timestamp, setTimestamp] = useState(null);\n  const [data, setData] = useState({\n    leftAlpha: 30,\n    rightAlpha: -50,\n    leftScale: 0.7,\n    rightScale: 0.8,\n    leftBeta: 90,\n    rightBeta: 90,\n    maxLevel: 11,\n    color: \"brown\",\n  });\n  const {\n    leftAlpha,\n    rightAlpha,\n    leftScale,\n    rightScale,\n    leftBeta,\n    rightBeta,\n    maxLevel,\n    color,\n  } = data;\n  const mat = new THREE.LineBasicMaterial({ color });\n  const clear = () => {\n    if (scene) {\n      for (let i = 0; i < scene.children.length; i++) {\n        scene.remove(scene.children[i]);\n        i--;\n      }\n      const grid = new THREE.GridHelper(500);\n      grid.translateY(-180);\n      scene.add(grid);\n    }\n  };\n  const drawTree = () => {\n    clear();\n    const curves = [];\n    const fork = (points, cnt, cross) => {\n      if (cnt == 0) {\n        return;\n      }\n      if (cnt === maxLevel) return curves.push(points);\n      // draw(start, dir, cnt, left);\n      const last = points[points.length - 1];\n      const dir = new THREE.Vector3().subVectors(\n        last,\n        points[points.length - 2]\n      );\n\n      const normalDir = new THREE.Vector3().copy(dir).normalize();\n      let dir_left = new THREE.Vector3().copy(dir);\n      const crossLeft = cross\n        ? new THREE.Vector3()\n            .copy(cross)\n            .applyAxisAngle(normalDir, (leftBeta / 180) * Math.PI)\n        : initAxis;\n      dir_left.applyAxisAngle(crossLeft, (leftAlpha / 180) * Math.PI);\n      dir_left.normalize();\n\n      let dir_right = new THREE.Vector3().copy(dir);\n      const crossRight = cross\n        ? new THREE.Vector3()\n            .copy(cross)\n            .applyAxisAngle(normalDir, (rightBeta / 180) * Math.PI)\n        : initAxis;\n      dir_right.applyAxisAngle(crossRight, (rightAlpha / 180) * Math.PI);\n      dir_right.normalize();\n\n      const newCross = new THREE.Vector3()\n        .crossVectors(dir_left, dir_right)\n        .normalize();\n\n      fork(\n        [\n          ...points,\n          new THREE.Vector3()\n            .copy(last)\n            .add(dir_left.multiplyScalar(dir.length() * leftScale)),\n        ],\n        cnt + 1,\n        newCross\n      );\n      fork(\n        [\n          ...points,\n          new THREE.Vector3()\n            .copy(last)\n            .add(dir_right.multiplyScalar(dir.length() * rightScale)),\n        ],\n        cnt + 1,\n        newCross\n      );\n    };\n    fork(root, 1);\n    curves\n      .map((points) => new THREE.BufferGeometry().setFromPoints(points))\n      .map((geometry) => new THREE.Line(geometry, mat))\n      .forEach((mesh) => {\n        scene.add(mesh);\n      });\n  };\n  useEffect(() => {\n    if (scene) {\n      drawTree();\n    }\n  }, [\n    scene,\n    leftAlpha,\n    rightAlpha,\n    leftScale,\n    rightScale,\n    leftBeta,\n    rightBeta,\n    maxLevel,\n    color,\n  ]);\n  useEffect(() => {\n    if (timestamp !== null && scene) {\n      // draw_tree();\n    }\n  }, [timestamp]);\n\n  useEffect(() => {\n    if (!obj.scene) {\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(\n        45,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        10000\n      );\n      const renderer = new THREE.WebGLRenderer({ alpha: true });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      // renderer.setClearColor(0x000000);\n      scene.background = new THREE.Color(0xffffff);\n      document\n        .getElementsByClassName(\"App\")[0]\n        .appendChild(renderer.domElement);\n      const canvas = renderer.domElement;\n      const controls = new OrbitControls(camera, canvas);\n      controls.autoRotate = true;\n      camera.position.z = 1000;\n\n      setObj({ scene, camera, renderer, canvas, controls });\n      setInterval(() => {\n        setTimestamp(new Date().getTime());\n      }, 800);\n    }\n  }, [obj]);\n  useEffect(() => {\n    if (scene) {\n      controls.update();\n      renderer.render(scene, camera);\n    }\n    requestAnimationFrame(setFrameId);\n  }, [frameId]);\n  return (\n    <div className=\"App\">\n      <div className=\"hud\">\n        <h1>Fractal tree in 3D</h1>\n        <h2>\n          inspired by{\" \"}\n          <a href=\"https://www.haojunlu.com/article/tree.html\">\n            haojunlu's article\n          </a>\n        </h2>\n      </div>\n      <DatGui data={data} onUpdate={setData}>\n        <DatNumber\n          path=\"leftAlpha\"\n          label=\"leftAlpha\"\n          min={-180}\n          max={180}\n          step={1}\n        />\n        <DatNumber\n          path=\"rightAlpha\"\n          label=\"rightAlpha\"\n          min={-180}\n          max={180}\n          step={1}\n        />\n        <DatNumber\n          path=\"leftScale\"\n          label=\"leftScale\"\n          min={-2}\n          max={2}\n          step={0.01}\n        />\n        <DatNumber\n          path=\"rightScale\"\n          label=\"rightScale\"\n          min={-2}\n          max={2}\n          step={0.01}\n        />\n        <DatNumber\n          path=\"leftBeta\"\n          label=\"leftBeta\"\n          min={-180}\n          max={180}\n          step={1}\n        />\n        <DatNumber\n          path=\"rightBeta\"\n          label=\"rightBeta\"\n          min={-180}\n          max={180}\n          step={1}\n        />\n        <DatNumber path=\"maxLevel\" label=\"maxLevel\" min={2} max={20} step={1} />\n        <DatColor path=\"color\" label=\"color\" />\n      </DatGui>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}